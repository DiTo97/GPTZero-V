import streamlit as st
import io
import json

# c2pa-python library for reading C2PA data
# See usage: https://raw.githubusercontent.com/contentauth/c2pa-python/refs/heads/main/docs/usage.md
from c2pa import Reader as C2PAReader

# exif library for reading EXIF data
# See usage: https://gitlab.com/TNThieding/exif/-/raw/master/README.rst
from exif import Image as ExifImage


# 1. A small utility function to guess an "AI generation probability"
#    based on whether we found C2PA indicating OpenAI, EXIF data, etc.
def compute_probability(c2pa_generated: bool, exif_present: bool) -> int:
    """
    Returns an integer from 0 to 100 representing our 'best guess' 
    of AI-generated probability (purely for demonstration).
    """
    if c2pa_generated:
        return 95  # If explicitly C2PA says "OpenAI", we guess high probability
    elif not exif_present:
        return 50  # No C2PA, no EXIF -> ambiguous
    else:
        return 10   # EXIF present, no AI metadata -> guess it's likely real


# 2. Check C2PA metadata
def check_c2pa(file_bytes):
    """
    Check for C2PA metadata in the image.
    Returns (is_generated, manifest_dict).
    """
    try:
        # Use a stream-based reader. Adjust the mime type if needed (e.g., "image/png").
        stream = io.BytesIO(file_bytes)
        reader = C2PAReader("image/jpeg", stream)
        manifest = reader.get_active_manifest()
        if manifest:
            claim_generator = manifest.get("claim_generator", "")
            if "openai" in claim_generator.lower():
                return True, manifest
        return False, manifest
    except Exception:
        # If there's an error or no C2PA data, just return false
        return False, None


# 3. Check EXIF metadata
def check_exif(file_bytes):
    """
    Check for EXIF metadata in the image.
    Returns (has_exif, exif_object).
    """
    try:
        stream = io.BytesIO(file_bytes)
        exif_img = ExifImage(stream)
        if exif_img.has_exif:
            return True, exif_img
        return False, None
    except Exception:
        return False, None


# 4. A small helper to create a "card" layout in Streamlit, 
#    styled similarly to shadcn using inline CSS
def card(title, content):
    st.markdown(f"""
    <div class="card">
      <div class="card-title">{title}</div>
      <div class="card-content">{content}</div>
    </div>
    """, unsafe_allow_html=True)


def main():
    # Inject some CSS to mimic "shadcn card" style
    st.markdown("""
    <style>
    .card {
      background-color: #fff;
      border: 1px solid rgba(0,0,0,0.08);
      border-radius: 8px;
      padding: 16px;
      margin-bottom: 16px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
    .card-title {
      font-size: 1.1rem;
      font-weight: 600;
      margin-bottom: 8px;
    }
    .card-content {
      font-size: 0.95rem;
      color: #333;
    }
    </style>
    """, unsafe_allow_html=True)

    st.title("Media Validity Verification")
    st.write("""
    This tool checks if an image contains:
    
    - **C2PA Metadata**: If present, and if the `claim_generator` field indicates an OpenAI image generation model,
      the image is flagged as generated.
    - **EXIF Metadata**: If no relevant C2PA metadata is found, the tool checks for EXIF data, which usually suggests 
      the image was captured from a device.
      
    Finally, it calculates a simplistic "AI-generated probability" for demonstration.
    """)

    # Create two columns: left for uploader, right for results
    left_col, right_col = st.columns([1,2], gap="large")

    with left_col:
        uploaded_file = st.file_uploader("Choose an image", type=["jpg", "jpeg", "png"])

    with right_col:
        if uploaded_file is not None:
            file_bytes = uploaded_file.read()
            st.image(file_bytes, caption="Uploaded Image", use_column_width=True)

            # 1) Check C2PA
            c2pa_generated, manifest = check_c2pa(file_bytes)

            # 2) Check EXIF
            exif_present, exif_data = check_exif(file_bytes)

            # 3) Compute AI probability
            ai_probability = compute_probability(c2pa_generated, exif_present)

            # Show AI Probability Card
            card(
                title="AI-Generated Probability",
                content=f"""
                <p><strong>{ai_probability}%</strong> chance this image was generated by AI (heuristic estimate).</p>
                """
            )

            # If C2PA is present, show its card
            if manifest is not None:
                # We can pretty-print the manifest or just highlight relevant fields
                # Here, let's highlight 'claim_generator' and 'title', if available
                claim_generator = manifest.get("claim_generator", "Not specified")
                claim_title = manifest.get("title", "N/A")

                c2pa_html = f"""
                <ul>
                  <li><strong>Claim Generator:</strong> {claim_generator}</li>
                  <li><strong>Title:</strong> {claim_title}</li>
                </ul>
                <p><em>Full Manifest:</em></p>
                <pre style="white-space: pre-wrap;">{json.dumps(manifest, indent=2)}</pre>
                """
                card("C2PA Metadata Found", c2pa_html)
            else:
                card("C2PA Metadata", "<p>No C2PA metadata found.</p>")

            # If EXIF is present, show an EXIF card with a few interesting fields
            if exif_present:
                # Gather some typical fields
                exif_fields_of_interest = [
                    ("Camera Make", getattr(exif_data, 'make', None)),
                    ("Camera Model", getattr(exif_data, 'model', None)),
                    ("Date/Time Original", getattr(exif_data, 'datetime_original', None)),
                    ("GPS Latitude", getattr(exif_data, 'gps_latitude', None)),
                    ("GPS Longitude", getattr(exif_data, 'gps_longitude', None)),
                ]

                exif_content = "<ul>"
                for label, value in exif_fields_of_interest:
                    if value is not None:
                        exif_content += f"<li><strong>{label}:</strong> {value}</li>"
                exif_content += "</ul>"

                card("EXIF Metadata Found", exif_content)
            else:
                card("EXIF Metadata", "<p>No EXIF metadata found.</p>")

        else:
            st.info("Please upload an image to see the analysis.")

    # A horizontal rule
    st.markdown("---")
    st.header("README")
    st.markdown("""
    ### Media Validity Verification Tool

    **Overview**:
    
    This Streamlit app is designed as an early stage mechanism to verify whether an image appears to be
    captured from a device or generated using AI image generation tools (e.g., OpenAI models).
    
    **How It Works**:
    
    1. **C2PA Metadata Check**:
       - The app uses the [c2pa-python](https://github.com/contentauth/c2pa-python) library to read C2PA metadata.
       - It checks the active manifest's `claim_generator` field.
       - If this field contains the string `"openai"`, the image is flagged as likely generated.
    
    2. **EXIF Metadata Check**:
       - If no relevant C2PA metadata is found, the app uses the [exif](https://gitlab.com/TNThieding/exif) library.
       - Presence of EXIF metadata (e.g., camera information) can indicate that the image was taken by a device.
    
    3. **Heuristic Probability**:
       - As a demo, we compute a basic probability from 0â€“100 for AI generation. This is purely illustrative 
         and should not be considered a reliable metric.
    
    **Limitations**:
    
    - **Not Bulletproof**: EXIF metadata can be manipulated or added to images that were not actually captured by a device.
    - **Incomplete Coverage**: This tool does not cover all watermarking or authenticity measures (for example,
      [Google's SynthID](https://ai.googleblog.com/2022/05/announcing-synthid-for-generative-ai.html) is not supported).
    - **Call to Action**: With the increasing accuracy of media generation models, more structured efforts towards
      media validity verification must be enforced. We hope this tool raises awareness and sparks further discussion
      in the community.
    """)


if __name__ == "__main__":
    main()
